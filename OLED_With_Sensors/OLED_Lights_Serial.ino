/*
 * 
 * By Stephen Borsay
 * https://github.com/sborsay/Cloudboard
Key
------------

3- coloblue LED's
--------------
Blue on Pin 5
Green on Pin 18
Yellow on Pin 19
------------
GL5528 Photoresistor GPIO 23 
---------------------------
Header Block Output pins at 3.3 volts
------------
Pin GPIO 33 by GND wokrs goes 0 and 3.33v
Pin GPIO 25 
Pin GPIO 26 
Pin GPIO 27 
Pin GPIO 14

2- Push Buttons
--------------
Button 1 GPIO 35;     //Button1, active low, GPIO35 
Button 2 GPIO 25;     //Button1, active low, GPIO25      
---------------------

DHT11 temperature and humidity tester on Pin 15

*/

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "DHT.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET    -1 // Reset pin # (or -1 if sharing Arduino reset pin)

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Bitmap of ronaldo Image
const unsigned char ronaldo [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x07, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xf0, 0x00, 
  0x00, 0x00, 0x07, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xf8, 0x00, 
  0x00, 0x00, 0x07, 0x18, 0x8f, 0xff, 0xff, 0x31, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xe3, 0xfc, 0x00, 
  0x00, 0x00, 0x07, 0x1d, 0x9f, 0xff, 0xfe, 0x33, 0xff, 0xff, 0x3f, 0xe3, 0xfc, 0x63, 0xfe, 0x00, 
  0x00, 0x00, 0x06, 0x3f, 0x18, 0x00, 0x38, 0x60, 0x00, 0x01, 0x07, 0x83, 0xfc, 0x8c, 0x9f, 0x00, 
  0x00, 0x00, 0x06, 0x3f, 0x10, 0x70, 0x60, 0x60, 0x49, 0x93, 0x06, 0x27, 0xf8, 0x88, 0x1f, 0x80, 
  0x00, 0x00, 0x06, 0x1f, 0x32, 0x20, 0x60, 0x60, 0x01, 0x03, 0x06, 0x07, 0xf9, 0x88, 0x1f, 0x80, 
  0x00, 0x03, 0xff, 0x80, 0x00, 0x60, 0x00, 0x00, 0xc3, 0x00, 0x42, 0x03, 0xf0, 0x18, 0x0f, 0x80, 
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xc0, 
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xc0, 
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xc0, 
  0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x3c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0x78, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
  0x71, 0xe8, 0x04, 0x04, 0x02, 0x79, 0x80, 0xc7, 0x3e, 0x3c, 0xe0, 0x60, 0x18, 0x1e, 0x31, 0x88, 
  0x70, 0x1f, 0x1c, 0x7c, 0x72, 0x78, 0x8f, 0xc7, 0x3e, 0x00, 0xc6, 0x23, 0x13, 0x9c, 0x38, 0x9c, 
  0x78, 0x0f, 0x3c, 0x1c, 0x02, 0x00, 0x83, 0xc1, 0x3e, 0x00, 0x8f, 0x20, 0x10, 0x7c, 0x1c, 0x3c, 
  0x7f, 0x07, 0x3c, 0x1c, 0x06, 0x00, 0x83, 0xc8, 0x3e, 0x3c, 0x0f, 0x20, 0x38, 0x18, 0x1e, 0x3e, 
  0x3b, 0xc7, 0x3c, 0xfc, 0x7e, 0x78, 0x9f, 0xcc, 0x3e, 0x3c, 0x0e, 0x22, 0x3f, 0x88, 0x0e, 0x7e, 
  0x30, 0x0f, 0x3c, 0x04, 0x7e, 0x78, 0x80, 0xce, 0x3e, 0x00, 0xc0, 0x63, 0x10, 0x11, 0xc6, 0x7e, 
  0x3c, 0x1f, 0x3c, 0x06, 0x7e, 0x79, 0x80, 0xcf, 0x3e, 0x01, 0xf0, 0xe3, 0x98, 0x33, 0xc6, 0x7e, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
  0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



int blue = 5;
int green = 18;
int yellow = 19;
int ledDelay;
//int delay1;

int potPin = 32;   //Potentiometer on GPIO 32
int lightLevel;
const int sensorPin = 33; //GL5528 phtoresistor on GPIO33

const int button1 = 35;     //Button1 Top, active high, GPIO35 
const int button2 = 25;          //and 32 is bottom button, 32(but2)  GPIO32

// variables will change:
int buttonState1 = 0;         // variable for reading the pushbutton status
int buttonState2 = 0;         // variable for reading the pushbutton status

//----------for DHT11 Enviro Sensor on Board-------------



#define DHTPIN 15     // Digital pin connected to the DHT sensor

// Uncomment whatever type you're using!
#define DHTTYPE DHT11   // DHT 11
DHT dht(DHTPIN, DHTTYPE);


// the setup function runs once when you press reset or power the board
void setup() {

//begin OLED block
   // initialize with the I2C addr 0x3C
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

  // Clear the buffer.
  display.clearDisplay();

  // Display bitmap
  display.drawBitmap(0, 0,  ronaldo, 128, 64, WHITE);
  display.display();
//end OLED Block
  
  // initialize digital pin LED_BUILTIN as an output.
  //three light bar by chip g y b
  //three light bar by chip g y b
  pinMode(blue, OUTPUT); // blue light tied high, next to chip GPIO 5 works
  pinMode(green, OUTPUT); // Green light GPIO 18 next to chip works
  pinMode(yellow, OUTPUT); //Yellow light GPIO 19 next to chip works


//header block all work
      pinMode(13, OUTPUT); //header pin GPIO 13 by GND wokrs goes 0 and 3.33v
      pinMode(23, OUTPUT); //header pin GPIO 23 by 33 wokrs goes 0 and 3.29v
      pinMode(26, OUTPUT); //header pin GPIO 26 by 25 wokrs goes 0 and 3.30v
      pinMode(27, OUTPUT); //header pin GPIO 27 by 26 wokrs goes 0 and 3.34v
      pinMode(14, OUTPUT); //header pin GPIO 14 by 26 wokrs goes 0 and 3.31v


      //buttons
      pinMode(button1, INPUT);
      pinMode(button2, INPUT);

      dht.begin();
       
     Serial.begin(115200);
}

// the loop function runs over and over again forever
void loop() {
    //delay(1000); //delay for DHT if needed
  
  //Photoresistor GL5528 tester
    lightLevel = analogRead(sensorPin);
    Serial.print((String)"The Photoresistor light level is: "+ lightLevel);


//LED chaser tester for 3 colored LEDs
  ledDelay = analogRead(potPin); //potentiomter on GPIO 32 potPin
  Serial.println((String)"  and the Potentiometer is set to: "+  ledDelay);
  digitalWrite(blue, HIGH);
  digitalWrite(green, LOW);
  digitalWrite(yellow, LOW);
  delay(ledDelay);
  digitalWrite(blue, LOW);
  digitalWrite(green, HIGH);
  digitalWrite(yellow, LOW);
  delay(ledDelay);
  digitalWrite(blue, LOW);
  digitalWrite(green, LOW);
  digitalWrite(yellow, HIGH);
  delay(ledDelay);

// 2-pushbutton tester section
  
   buttonState1 = digitalRead(button1) ;
   buttonState2 = digitalRead(button2) ;
   
   if(buttonState1 == LOW) {
     Serial.println("button 1 pressed " ) ;
   }

    if(buttonState2 == LOW) {
     Serial.println("button 2 pressed " ) ;
   }

   //-----------DHT tester Section

  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.print(F("°C "));
  Serial.print(f);
  Serial.print(F("°F  Heat index: "));
  Serial.print(hic);
  Serial.print(F("°C "));
  Serial.print(hif);
  Serial.println(F("°F"));

  //-------End DHT tester section
  
}
